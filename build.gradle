/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'hpitelka' at '10/12/16 1:16 PM' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'org.kordamp.markdown.convert'

apply from: 'localSettings.gradle'

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	compile group: 'io.dropwizard', name: 'dropwizard-core', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-jdbi', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-migrations', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-auth', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-views-freemarker', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-assets', version: '1.0.2'
	compile 'org.xerial:sqlite-jdbc:3.14.2.1' //If using SQLite
	compile 'javax.mail:mail:1.4.7'
	compile 'com.github.dblock.waffle:waffle-distro:1.8.1'
	compile 'com.graphql-java:graphql-java:2.2.0'

	compile group: 'org.jvnet.com4j', name: 'com4j', version: '20110320'
	compile 'org.jvnet.com4j.typelibs:active-directory:1.0'
	compile 'org.jvnet.com4j.typelibs:ado20:1.0'

	compile files('lib/sqljdbc42.jar')
	
	testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.0.2'
	testCompile group: 'io.dropwizard', name: 'dropwizard-client', version: '1.0.2'
	testCompile 'org.apache.commons:commons-io:1.3.2'
}

//Set project version to git tag
def proc = "git describe".execute(null, projectDir);
proc.waitFor();
project.version = proc.text.trim();

mainClassName = "mil.dds.anet.AnetApplication"

String dbDriver = run.environment['DB_DRIVER']
dbDriver = dbDriver ? dbDriver : "sqlite"

if (dbDriver == "sqlserver") {
	run.environment("ANET_DB_DRIVER", "com.microsoft.sqlserver.jdbc.SQLServerDriver")
	run.environment("ANET_DB_URL", "jdbc:sqlserver://${run.environment['ANET_DB_SERVER']};databaseName=${run.environment['ANET_DB_NAME']}")
} else {
	run.environment("ANET_DB_DRIVER", "org.sqlite.JDBC")
	run.environment("ANET_DB_URL", "jdbc:sqlite:development.db")
	run.environment("ANET_DB_DATE_STRING_FORMAT", "yyyy-MM-dd hh:mm:ss.SSS Z")
	run.environment("ANET_DB_DATE_CLASS", "text")
}

test.environment = run.environment

run.args = ["server","anet.yml"]

task dbStatus(dependsOn: 'compileJava', type: JavaExec) {
	classpath =  sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","status","anet.yml"]
}

task dbMigrate(dependsOn: 'compileJava', type: JavaExec) {
	classpath =  sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","migrate","anet.yml"]
}

task dbDrop(dependsOn: 'compileJava', type: JavaExec) {
	classpath =  sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","drop-all","--confirm-delete-everything","anet.yml"]
}

//Configure the Java Checkstyle settings.  Run with ./gradlew check
checkstyle {
	configFile = rootProject.file('gradle/checkstyle.xml')
	toolVersion = '7.5'
}

//Configure extra files to include the distribution file
distributions {
	main {
		contents {
			into('docs/') {
				from('anet.yml') { rename('anet.yml', 'anet.yml.template') }
				from(markdownToHtml)
			}
		}
	}
}

//Add gradle plugin repos
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.kordamp:markdown-gradle-plugin:1.1.0"
 }
}

//Configure Markdown plugin
allprojects {
  markdownToHtml.sourceDir = file("docs")
  markdownToHtml.outputDir = file("$buildDir/documentation")
}


/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'hpitelka' at '10/12/16 1:16 PM' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */
 
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'org.kordamp.markdown.convert'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: "se.bjurr.gitchangelog.git-changelog-gradle-plugin"
apply plugin: 'com.moowork.node'
apply plugin: "org.sonarqube"

apply from: 'localSettings.gradle'

sourceCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// The production code uses the SLF4J logging API at compile time
	compile group: 'io.dropwizard', name: 'dropwizard-core', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-jdbi', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-migrations', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-auth', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-views-freemarker', version: '1.0.2'
	compile group: 'io.dropwizard', name: 'dropwizard-assets', version: '1.0.2'
	compile group: 'org.antlr', name: 'stringtemplate', version: '3.2.1'

	compile 'org.xerial:sqlite-jdbc:3.14.2.1' //If using SQLite
	compile 'javax.mail:mail:1.4.7'
	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'ch.qos.logback:logback-core:1.2.3'
	compile 'ch.qos.logback:logback-access:1.2.3'
	compile 'com.github.waffle:waffle-distro:1.8.3'
	compile 'com.graphql-java:graphql-java:2.2.0'
	compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20160924.1'

	compile group: 'org.jvnet.com4j', name: 'com4j', version: '20110320'
	compile 'org.jvnet.com4j.typelibs:active-directory:1.0'
	compile 'org.jvnet.com4j.typelibs:ado20:1.0'

	// Used for converting GraphQL GET request output to XML:
	compile 'org.json:json:20170516'

	compile files('lib/sqljdbc42.jar')
	
	// used for writing Excel documents
	compile group: 'org.apache.poi', name: 'poi', version: '3.17'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'
	
	testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.0.2'
	testCompile group: 'io.dropwizard', name: 'dropwizard-client', version: '1.0.2'
	testCompile 'org.apache.commons:commons-io:1.3.2'
}

//Set project version to git tag
def proc = "git describe".execute(null, projectDir);
proc.waitFor();
project.version = proc.text.trim();
project.group = "ncia"

mainClassName = "mil.dds.anet.AnetApplication"

applicationDefaultJvmArgs = ["-Djava.library.path=MY_APP_HOME/lib"]

String dbDriver = run.environment['DB_DRIVER']
dbDriver = dbDriver ? dbDriver : "sqlite"

if (dbDriver == "sqlserver") {
	run.environment("ANET_DB_DRIVER", "com.microsoft.sqlserver.jdbc.SQLServerDriver")
	run.environment("ANET_DB_URL", "jdbc:sqlserver://${run.environment['ANET_DB_SERVER']};databaseName=${run.environment['ANET_DB_NAME']}")
} else {
	run.environment("ANET_DB_DRIVER", "org.sqlite.JDBC")
	run.environment("ANET_DB_URL", "jdbc:sqlite:development.db")
	run.environment("ANET_DB_DATE_STRING_FORMAT", "yyyy-MM-dd hh:mm:ss.SSS Z")
	run.environment("ANET_DB_DATE_CLASS", "text")
}

test.environment = run.environment

run.args = ["server","anet.yml"]


task buildClient(type: NpmTask) {
	outputs.upToDateWhen { false };
	args = ['run', 'build']
}

task dbStatus(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","status","anet.yml"]
}

task dbMigrate(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","migrate","anet.yml"]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}

task dbTest(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","test","anet.yml"]
}

task dbRollback(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","rollback","anet.yml","--count","1"]
	if (project.hasProperty("dry-run")) {
		args += "--dry-run"
	}
}

task dbDrop(dependsOn: 'compileJava', type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	environment(run.environment)
	main = 'mil.dds.anet.AnetApplication'
	args = ["db","drop-all","--confirm-delete-everything","anet.yml"]
}

task dockerPullDB(type: com.bmuschko.gradle.docker.tasks.image.DockerPullImage) {
	repository = "ncia/anet-mssql-linux"
	description = "Pulls a docker image for the ANET DB from " + repository
	tag = "latest"
}

task dockerCreateDB(dependsOn: dockerPullDB, type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
	imageId = dockerPullDB.getImageId()
	containerName = "anet-mssql-server"
	description = "Creates an ANET MS SQL DB container named " + containerName
	binds = ["${projectDir}":"/hostdata"] + run.environment.get("DOCKER_MOUNTS", [:])
	env = ["ACCEPT_EULA=Y","SA_PASSWORD="+run.environment["ANET_SA_PASSWORD"],"DB_NAME="+run.environment["ANET_DB_NAME"],"DB_USER="+run.environment["ANET_DB_USERNAME"],"DB_USER_PASSWORD="+run.environment["ANET_DB_PASSWORD"]]
	portBindings = ["1433:"+run.environment["ANET_DB_PORT"]]
}

// need to make this invoke dbCreateContainer if there is no anet-mssql-server and possibly get newer image if available
task dockerStartDB(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
	description = "Starts anet-mssql-server container"
	targetContainerId { "anet-mssql-server" }
}

task dockerStopDB(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
	description = "Stops anet-mssql-server container"
	targetContainerId { "anet-mssql-server" }
}

task dockerRemoveDB(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
	description = "Removes anet-mssql-server container"
	targetContainerId { "anet-mssql-server" }
}

task dockerLoadDB(type: com.bmuschko.gradle.docker.tasks.container.DockerExecContainer) {
	description = "Loads default data into anet-mssql-server container"
	targetContainerId { "anet-mssql-server" }
	cmd = ["/opt/mssql-tools/bin/sqlcmd", "-S", run.environment["ANET_DB_SERVER"], "-U", run.environment["ANET_DB_USERNAME"], "-P", run.environment["ANET_DB_PASSWORD"], "-d", run.environment["ANET_DB_NAME"], "-i", "/hostdata/insertBaseData.sql"]
}

task changelog (type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = new File("${buildDir}/resources/main/assets/client/changelog.html");
	templateContent = file('docs/changelog.mustache').getText('UTF-8');
}

processResources.dependsOn changelog
jar.dependsOn buildClient

//Configure the Java Checkstyle settings. Run with ./gradlew check
checkstyle {
	configFile = rootProject.file('gradle/checkstyle.xml')
	toolVersion = '7.5'
}

//Configure extra files to include the distribution file
distributions {
	main {
		contents {
			into('docs/') {
				from('anet.yml') { rename('anet.yml', 'anet.yml.template') }
				from(markdownToHtml)
			}
			into('lib/') {
				from('lib/sqljdbc_auth.dll')
			}
		}
	}
}

//Add gradle plugin repos
buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.kordamp:markdown-gradle-plugin:1.1.0"
		classpath 'com.bmuschko:gradle-docker-plugin:3.0.12'
		classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.50"
		classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
	}
}

docker {
	javaApplication {
		baseImage = 'openjdk:8-jre'
		maintainer = 'Vassil Iordanov "vassil.iordanov@gmail.com"'
		ports = [80, 443]
		tag = 'ncia/anet-app-server'
		exec {
			entryPoint "/$project.name-$project.version/bin/anet server anet.yaml"
		}
	}
}

startScripts {
	doLast {
		unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
		windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%APP_HOME%')
	}
}

//Configure Markdown plugin
allprojects {
	markdownToHtml.sourceDir = file("docs")
	markdownToHtml.outputDir = file("$buildDir/documentation")
	markdownToHtml.hardwraps = true
}

node {
	nodeModulesDir = file("${project.projectDir}/client")
}

sonarqube {
    properties {
        property "sonar.sources", "src/main/java,client/src"
        property "sonar.tests", "src/test/java,client/tests"
    }
}
